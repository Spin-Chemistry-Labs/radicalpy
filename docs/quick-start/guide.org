#+PROPERTY: header-args:python  :session *python* :results output

#+begin_src python :results silent
  import sys
  sys.stderr=sys.stdout
  from radicalpy.simulation import Molecule
#+end_src


* Using the molecule database

#+begin_src python :exports both
  flavin = Molecule(radical="flavin_anion", nuclei=["H25"])
  print(flavin)
#+end_src

#+RESULTS:
: Molecule: flavin_anion
:   HFCs: [array([[ 0.47570582,  0.04192216, -0.00921916],
:        [ 0.04192216,  0.4626044 , -0.00827001],
:        [-0.00921916, -0.00827001,  0.42560999]])]
:   Multiplicities: [2]
:   Magnetogyric ratios (mT): [267522.18744]
:   Number of particles: 1


* Helpful error messages

#+begin_src python :exports both
  try:
    Molecule("adenine_cation", ["buz"])
  except ValueError as e:
    print(e)
#+end_src

#+RESULTS:
: Available nuclei below.
: N6-H2 (hfc = -0.66)
: N6-H1 (hfc = -0.63)
: C8-H (hfc = -0.55)


* Using the isotope database

#+begin_src python :exports both
  print(Molecule(nuclei=["1H", "14N"], hfcs=[0.41, 1.82]))
#+end_src

#+RESULTS:
: Molecule: N/A
:   HFCs: [0.41, 1.82]
:   Multiplicities: [2, 3]
:   Magnetogyric ratios (mT): [267522.18744, 19337.792]
:   Number of particles: 2


* Custom molecules

#+begin_src python :exports both
  print(Molecule("my_flavin",
                 multiplicities=[2],
                 gammas_mT=[267522.18744],
                 hfcs=[0.5]))
#+end_src

#+RESULTS:
: Molecule: my_flavin
:   HFCs: [0.5]
:   Multiplicities: [2]
:   Magnetogyric ratios (mT): [267522.18744]
:   Number of particles: 1

#+begin_src python :exports both
  Z = Molecule("kryptonite")
  print(Z)
#+end_src

#+RESULTS:
: Molecule: kryptonite
:   HFCs: []
:   Multiplicities: []
:   Magnetogyric ratios (mT): []
:   Number of particles: 0

* Building a simulation object

#+begin_src python :exports both
  import radicalpy as rp
  import matplotlib.pyplot as plt
  sim = rp.simulation.HilbertSimulation([flavin, Z])
  print(sim)
#+end_src

#+RESULTS:
#+begin_example
Number of electrons: 2
Number of nuclei: 1
Number of particles: 3
Multiplicities: [2, 2, 2]
Magnetogyric ratios (mT): [-176085963.023, -176085963.023, 267522.18744]
Nuclei: ['H25']
Couplings: [0]
HFCs (mT): [array([[ 0.47570582,  0.04192216, -0.00921916],
       [ 0.04192216,  0.4626044 , -0.00827001],
       [-0.00921916, -0.00827001,  0.42560999]])]
#+end_example

#+begin_src python :exports both :results output file
  H = sim.total_hamiltonian(B=0, D=0, J=0)
  plt.clf()
  plt.spy(H)
  fname = "img/hamiltonian.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/hamiltonian.png]]


* Time evolution

#+begin_src python :exports both :results output file
  import numpy as np
  from radicalpy.simulation import State

  time = np.arange(0, 2e-6, 5e-9)
  rhos = sim.time_evolution(State.SINGLET, time, H)

  k = 3e6
  kinetics=[rp.kinetics.Exponential(k)]
  time_evol = sim.product_probability(State.TRIPLET, rhos)

  sim.apply_hilbert_kinetics(time, time_evol, kinetics)

  product_yield, product_yield_sum = sim.product_yield(time_evol, time, k)
  x = time * 1e6

  plt.clf()
  plt.plot(x, time_evol, color="red", linewidth=2)
  plt.fill_between(x, product_yield, color="blue", alpha=0.2)
  plt.xlabel("Time ($\mu s$)")
  plt.ylabel("Probability")
  plt.ylim([0, 1])
  plt.legend([r"$P_i(t)$", r"$\Phi_i$"])
  plt.suptitle(f"PY = {product_yield_sum}")

  fname = "img/time_evolution.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/time_evolution.png]]


* Monte Carlo random walk

#+begin_src python :exports both :results output file
  from radicalpy import classical, plot

  n_steps = 2000
  r_min = 0.5e-9 /2
  r_max = 2e-9 / 2
  r = (r_min) + np.random.sample() * ((r_max) - (r_min))
  x0, y0, z0 = r, 0, 0
  mut_D = 1e-6 / 10000
  del_T = 40e-12
  delta_r = classical.get_delta_r(mut_D, del_T)
  pos, dist, ang = classical.randomwalk_3d(n_steps, x0, y0,z0, delta_r, r_max)
  plot.monte_carlo_caged(pos, r_max)

  fname = "img/monte_carlo.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/monte_carlo.png]]


* Correlation time estimation

#+begin_src python :exports both :results output file
  t, r, J, D = classical.monte_carlo_exchange_dipolar(n_steps -1, r_min, del_T, pos[:,0], dist[0:-1], ang)

  t_convert = 1e3

  plt.clf()
  plt.rc('axes',edgecolor='k')
  plt.grid(False)
  plt.axis('on')
  plt.plot(t / t_convert, r * 1e9, 'r')
  plt.title("Time evolution of radical pair separation", size=16)
  plt.xlabel('$t$ ($\mu s$)', size=14)
  plt.ylabel('$r$ (nm)', size=14)
  plt.tick_params(labelsize=14)

  fname = "img/correlation_time_estimation_J.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/correlation_time_estimation_J.png]]


* Document still not finished! Sorry!

