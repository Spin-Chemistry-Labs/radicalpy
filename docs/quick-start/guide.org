#+PROPERTY: header-args:python  :session *python* :results output

#+begin_src python :results silent
  import sys
  sys.stderr=sys.stdout
  from radicalpy.simulation import Molecule
#+end_src


* Using the molecule database

#+begin_src python :exports both
  flavin = Molecule(radical="flavin_anion", nuclei=["H25"])
  print(flavin)
#+end_src

#+RESULTS:
: Molecule: flavin_anion
:   HFCs: [array([[ 0.47570582,  0.04192216, -0.00921916],
:        [ 0.04192216,  0.4626044 , -0.00827001],
:        [-0.00921916, -0.00827001,  0.42560999]])]
:   Multiplicities: [2]
:   Magnetogyric ratios (mT): [267522.18744]
:   Number of particles: 1


* Helpful error messages

#+begin_src python :exports both
  try:
    Molecule("adenine_cation", ["buz"])
  except ValueError as e:
    print(e)
#+end_src

#+RESULTS:
: Available nuclei below.
: N6-H2 (hfc = -0.66)
: N6-H1 (hfc = -0.63)
: C8-H (hfc = -0.55)


* Using the isotope database

#+begin_src python :exports both
  print(Molecule(nuclei=["1H", "14N"], hfcs=[0.41, 1.82]))
#+end_src

#+RESULTS:
: Molecule: N/A
:   HFCs: [0.41, 1.82]
:   Multiplicities: [2, 3]
:   Magnetogyric ratios (mT): [267522.18744, 19337.792]
:   Number of particles: 2


* Custom molecules

#+begin_src python :exports both
  print(Molecule("my_flavin",
                 multiplicities=[2],
                 gammas_mT=[267522.18744],
                 hfcs=[0.5]))
#+end_src

#+RESULTS:
: Molecule: my_flavin
:   HFCs: [0.5]
:   Multiplicities: [2]
:   Magnetogyric ratios (mT): [267522.18744]
:   Number of particles: 1

#+begin_src python :exports both
  Z = Molecule("kryptonite")
  print(Z)
#+end_src

#+RESULTS:
: Molecule: kryptonite
:   HFCs: []
:   Multiplicities: []
:   Magnetogyric ratios (mT): []
:   Number of particles: 0

* Building a simulation object

#+begin_src python :exports both
  import radicalpy as rp
  import matplotlib.pyplot as plt
  sim = rp.simulation.HilbertSimulation([flavin, Z])
  print(sim)
#+end_src

#+RESULTS:
#+begin_example
Number of electrons: 2
Number of nuclei: 1
Number of particles: 3
Multiplicities: [2, 2, 2]
Magnetogyric ratios (mT): [-176085963.023, -176085963.023, 267522.18744]
Nuclei: ['H25']
Couplings: [0]
HFCs (mT): [array([[ 0.47570582,  0.04192216, -0.00921916],
       [ 0.04192216,  0.4626044 , -0.00827001],
       [-0.00921916, -0.00827001,  0.42560999]])]
#+end_example

#+begin_src python :exports both :results output file
  H = sim.total_hamiltonian(B=0, D=0, J=0)
  plt.spy(H)
  fname = "img/hamiltonian.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/hamiltonian.png]]




*Document still not finished! Sorry!*
