#+PROPERTY: header-args:python  :session *python* :results output

#+begin_src python :results silent
  import sys

  from radicalpy.data import Molecule, Nucleus, Hfc

  sys.stderr = sys.stdout
#+end_src


* Using the molecule database

#+begin_src python :exports both
  flavin = Molecule.fromdb(name="flavin_anion",
                           nuclei=["H25"])
  print(flavin)
#+end_src

#+RESULTS:
: Molecule: flavin_anion
: Nuclei:
:   1H(267522187.44, 2, 0.4546 <anisotropic available>)
: Info: {'units': 'mT', 'name': 'Flavin radical anion'}

* Helpful error messages

#+begin_src python :exports both
  try:
      Molecule.fromdb("adenine_cation", ["buz"])
  except ValueError as e:
      print(e)
#+end_src

#+RESULTS:
: Available nuclei:
: N6-H2 (hfc = -0.66)
: N6-H1 (hfc = -0.63)
: C8-H (hfc = -0.55)

* Using the isotope database

#+begin_src python :exports both
  print(Molecule.fromisotopes(isotopes=["1H", "14N"],
                              hfcs=[0.41, 1.82]))
#+end_src

#+RESULTS:
: Molecule: 
: Nuclei:
:   1H(267522187.44, 2, 0.41 <anisotropic not available>)
:   14N(19337792.0, 3, 1.82 <anisotropic not available>)

* Custom molecules

#+begin_src python :exports both
  hydrogen = Nucleus(267522187.44, 2, Hfc(50.7))
  print(Molecule("my_hydrogen", nuclei=[hydrogen]))
#+end_src

#+RESULTS:
: Molecule: my_hydrogen
: Nuclei:
:   Nucleus(267522187440.0, 2, 50.7 <anisotropic not available>)

#+begin_src python :exports both
  Z = Molecule("kryptonite")
  print(Z)
#+end_src

#+RESULTS:
: Molecule: kryptonite
: No nuclei specified.

* Building a simulation object

#+begin_src python :exports both
  import radicalpy as rp
  import matplotlib.pyplot as plt

  sim = rp.simulation.HilbertSimulation([flavin, Z])
  print(sim)
#+end_src

#+RESULTS:
: Number of electrons: 2
: Number of nuclei: 1
: Number of particles: 3
: Multiplicities: [2, 2, 2]
: Magnetogyric ratios (mT): [-176085963.023, -176085963.023, 267522.18744]
: Nuclei: [1H(267522187.44, 2, 0.4546 <anisotropic available>)]
: Couplings: [0]
: HFCs (mT): [0.4546 <anisotropic available>]

#+begin_src python :exports both :results output file
  H = sim.total_hamiltonian(B=0, D=0, J=0)
  plt.clf()
  plt.spy(H)
  fname = "img/hamiltonian.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/hamiltonian.png]]

* Time evolution

#+begin_src python :exports both :results output file
  import numpy as np
  from radicalpy.simulation import State

  time = np.arange(0, 2e-6, 5e-9)
  rhos = sim.time_evolution(State.SINGLET, time, H)

  k = 3e6
  kinetics=[rp.kinetics.Exponential(k)]
  time_evol = sim.product_probability(State.TRIPLET, rhos)

  sim.apply_hilbert_kinetics(time, time_evol, kinetics)

  product_yield, product_yield_sum = sim.product_yield(time_evol, time, k)
  x = time * 1e6

  plt.clf()
  plt.plot(x, time_evol, color="red", linewidth=2)
  plt.fill_between(x, product_yield, color="blue", alpha=0.2)
  plt.xlabel("Time ($\mu s$)")
  plt.ylabel("Probability")
  plt.ylim([0, 1])
  plt.legend([r"$P_i(t)$", r"$\Phi_i$"])
  plt.suptitle(f"PY = {product_yield_sum}")

  fname = "img/time_evolution.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/time_evolution.png]]

* Monte Carlo random walk

#+begin_src python :exports both :results output file
  from radicalpy import classical, plot

  t = np.arange(0, 50e-9, 40e-12)
  r_min = 0.5e-9 / 2
  r_max = 1.5e-9
  r = (r_min) + np.random.sample() * ((r_max) - (r_min))
  x0, y0, z0 = r, 0, 0
  mut_D = 1e-6 / 10000
  del_T = 40e-12
  delta_r = classical.get_delta_r(mut_D, del_T)
  pos, dist, ang = classical.randomwalk_3d(len(t), x0, y0, z0, delta_r, r_min, r_max)
  plot.monte_carlo_caged(pos, r_max)

  fname = "img/monte_carlo.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/monte_carlo.png]]

** Time evolution of radical pair separation

#+begin_src python :exports both :results output file
  t_convert = 1e3

  plt.clf()
  plt.grid(False)
  plt.axis("on")
  plt.rc("axes", edgecolor="k")
  plt.plot(t / t_convert, dist * 1e9, "r")
  plt.title("Time evolution of radical pair separation", size=16)
  plt.xlabel("$t$ ($\mu s$)", size=14)
  plt.ylabel("$r$ (nm)", size=14)
  plt.tick_params(labelsize=14)

  fname = "img/monte_carlo_dist.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/monte_carlo_dist.png]]

** Time evolution of exchange interaction

#+begin_src python :exports both :results output file
  J = rp.estimations.exchange_interaction_in_solution_MC(dist)

  # plt.set_facecolor("none")
  plt.clf()
  plt.grid(False)
  plt.axis("on")
  plt.rc("axes", edgecolor="k")
  plt.plot(t / t_convert, J)
  plt.title("Time evolution of the exchange interaction", size=16)
  plt.xlabel("$t$ ($\mu s$)", size=14)
  plt.ylabel("$J$ (mT)", size=14)
  plt.tick_params(labelsize=14)
  fname = "img/monte_carlo_J.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/monte_carlo_J.png]]

** Time evolution of dipolar interaction

#+begin_src python :exports both :results output file
  # NOTE: D should average out to 0, since we're in solution.
  D = rp.estimations.dipolar_interaction_MC(dist, ang)

  # plt.facecolor("none")
  plt.clf()
  plt.grid(False)
  plt.axis("on")
  plt.rc("axes", edgecolor="k")
  plt.plot(t / t_convert, D, "g")
  plt.title("Time evolution of the dipolar interaction", size=16)
  plt.xlabel("$t$ ($\mu s$)", size=14)
  plt.ylabel("$D$ (mT)", size=14)
  plt.tick_params(labelsize=14)
  fname = "img/monte_carlo_D.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/monte_carlo_D.png]]

** Autocorrelation of exchange interaction

#+begin_src python :exports both :results output file
  acf_j = rp.utils.autocorrelation(J, factor=2)

  t = np.linspace(0, t[-1], len(acf_j))

  # ax.set_facecolor("none")
  plt.clf()
  plt.grid(False)
  plt.axis("on")
  plt.xscale("log")
  plt.rc("axes", edgecolor="k")
  plt.plot(t, acf_j, "b", label="J")
  plt.xlabel(r"$\tau$ (s)", size=14)
  plt.ylabel(r"$g_J(\tau)$", size=14)
  plt.title("Autocorrelation: exchange interaction", size=16)
  plt.tick_params(labelsize=14)
  fname = "img/monte_carlo_ac.png"
  plt.savefig(fname)
  print(fname)
#+end_src

#+RESULTS:
[[file:img/monte_carlo_ac.png]]

* Document still not finished! Sorry!

